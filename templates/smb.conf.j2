#jinja2: trim_blocks:True, lstrip_blocks:True
# Ansible generated config-file
[global]
{% if sambadc_dns in [ "SAMBA_INTERNAL" ] %}
        dns forwarder = {{ sambadc_forwarder }}
{% endif %}
        netbios name = {{ inventory_hostname | upper }}
        realm = {{ sambadc_realm | upper }}
{% if sambadc_type | lower == "new" %}
        server role = active directory domain controller
{% endif %}
        workgroup = {{ sambadc_workgroup }}
        idmap_ldb:use rfc2307 = yes
{% if sambadc_bind_interfaces is defined %}
        bind interfaces only = yes
        interfaces = {{ sambadc_bind_interfaces }}
{% endif %}
{% if sambadc_dns in [ "BIND9", "BIND9_DLZ" ] %}
        server services = -dns
{% endif %}
        # Configure winbind for kerberos-based login and SSO.
        kerberos method = secrets and keytab
        winbind refresh tickets = yes
        template shell = /bin/bash
        template homedir = /home/%D@%U
{% if sambadc_security_hardening %}
        # Disable NTLM and RC4-cipher
        # https://wiki.samba.org/index.php/Samba_Security_Documentation#Disabling_RC4
{% if sambadc_type | lower == "new" %}
        reject md5 clients = true
{% else %}
        reject md5 server = true
{% endif %}
        # ntlm auth = disabled
{% endif %}
{% if sambadc_shares is defined %}
        # For shares on the DC, Windows ACLs are mandatory
        # https://wiki.samba.org/index.php/Setting_up_a_Share_Using_Windows_ACLs
        # https://wiki.samba.org/index.php/Setting_up_Samba_as_an_Active_Directory_Domain_Controller#Using_the_Domain_Controller_as_a_File_Server_.28Optional.29
        vfs objects = btrfs acl_xattr dfs_samba4
        map acl inherit = yes
{% endif %}
        # TLS configuration
	tls priority = NORMAL:-VERS-TLS1.0:-VERS-TLS1.1
{% if sambadc_tls_ca is defined %}
	tls cafile = tls/{{ sambadc_tls_ca | basename }}
{% endif %}
{% if sambadc_tls_cert is defined %}
    {% if sambadc_tls_intermed is defined %}
	tls certfile = tls/{{ (sambadc_tls_cert | basename).split('.')[:-1] | join('.') }}.pem
    {% else %}
	tls certfile = tls/{{ sambadc_tls_cert | basename }}
    {% endif %}
{% endif %}
{% if sambadc_tls_key is defined %}
	tls keyfile = tls/{{ sambadc_tls_key | basename }}
{% endif %}

[sysvol]
        path = {{ STATEDIR }}/sysvol
        read only = No

[netlogon]
        path = {{ STATEDIR }}/sysvol/{{ sambadc_realm }}/scripts
        read only = No
{% for share in sambadc_shares %}

[{{ share["share"] }}]
{% for key, value in share.items() %}
    {% if key not in ['type', 'share'] %}
        {{ key }} = {{ value }}
    {% endif %}
  {% endfor %}
{% endfor %}
