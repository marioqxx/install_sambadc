---
# Start creating the users and their membership to groups.
- name: "[USERS] - Obtaining existing Users."
  ansible.builtin.command: samba-tool user list
  register: domain_users
  changed_when: false
  tags:
    - settings

- name: "[USERS] - Create Users."
  ansible.builtin.command: >
    samba-tool user create "{{ item.username }}" "{{ item.password }}" --use-username-as-cn
    --given-name="{{ item.given_name | default('\"\"') }}"
    --surname="{{ item.surname }}"
    --mail-address="{{ item.email | default('\"\"') }}"
    --profile-path="{{ item.profile_path | default('\"\"') }}"
    --home-drive="{{ item.home_drive | default('\"\"') }}"
    --home-directory="{{ item.home_path | default('\"\"') }}"
  when:
    - (item.password is string) and (item.password | length > 0)
    - (item.surname is string) and (item.surname | length > 0)
    - item.username not in domain_users.stdout_lines
  loop: "{{ sambadc_users | default({}) }}"
  register: df_cmd
  changed_when: true
  tags:
    - settings

- name: "[USERS] - Create Users Home-directory."
  ansible.builtin.file:
    path: "{{ item.create_home_path }}"
    owner: "{{ item.username }}"
    group: "Domain Users"
    mode: u=rwx,g=-,o=-
    state: directory
  when: (item.create_home_path is string) and (item.create_home_path | length > 0)
  loop: "{{ sambadc_users | default({}) }}"
  loop_control:
    label: "{{ 'Create home directory ' ~ item.create_home_path ~ ' for user: ' ~ item.username }}"
  tags:
    - settings

- name: "[USERS] - Modify the Permission (Mask) of the created Users Home-directory."
  ansible.builtin.command: setfacl -m m::rwx "{{ item.create_home_path }}"
  when: (item.create_home_path is string) and (item.create_home_path | length > 0)
  loop: "{{ sambadc_users | default({}) }}"
  loop_control:
    label: "{{ 'Set ACL for home directory ' ~ item.create_home_path }}"
  changed_when: true
  tags:
    - settings

# The command samba-tool user add does not support the displayName-attribute.
- name: "[USERS] - For created Users add attribute displayname if configured."
  ansible.builtin.command:
    cmd: ldapmodify -D "cn=Administrator,cn=Users,{{ sambadc_ldap }}" -w "{{ sambadc_admin_password }}"
    stdin: |
      dn: cn={{ item.username }},cn=Users,{{ sambadc_ldap }}
      changetype: modify
      replace: displayName
      displayName: {{ item.displayName }}
  when:
    - (item.displayName is string) and (item.displayName | length > 0)
  changed_when: df_cmd.stdout is match("modifying entry")
  loop: "{{ sambadc_users | default({}) }}"
  loop_control:
    label: "{{ 'Set displayname for user ' ~ item.username }}"
  register: df_cmd
  tags:
    - settings

- name: "[USERS] - Re-Obtaining existing Users."
  ansible.builtin.command: samba-tool user list
  register: domain_users
  changed_when: false
  tags:
    - settings

- name: "[USERS] - Re-Obtaining existing Groups."
  ansible.builtin.command: samba-tool group list
  register: domain_groups
  changed_when: false
  tags:
    - settings

- name: "[USERS] - Reading existing Group-memberships."
  ansible.builtin.command: samba-tool group listmembers "{{ item }}"
  register: domain_group_membership
  loop: "{{ sambadc_usergroupmembership | map(attribute='members') | flatten | unique }}"
  changed_when: false
  tags:
    - settings

- name: "[USERS] - Obtaining existing Group-memberships."
  ansible.builtin.set_fact:
    domain_group_memberships: "{{ domain_group_membership.results | items2dict(key_name='item', value_name='stdout_lines') }}"
  tags:
    - settings

- name: "[USERS] - Setting up Group-membership for Users."
  ansible.builtin.command: samba-tool group addmembers "{{ item.1 }}" "{{ item.0.username }}"
  loop: "{{ sambadc_usergroupmembership | subelements('members') }}"
  loop_control:
    label: "{{ 'Add for user ' ~ item.0.username ~ '  group-membership to group ' ~ item.1 }}"
  when:
    - item.0.username in domain_users.stdout_lines
    - item.0.username not in domain_group_memberships[item.1]
    - item.1 in domain_groups.stdout_lines
  changed_when: true
  tags:
    - settings
