---
# Prepare the system by installing required packages and make certain system-wide settings.
- name: "[SETUP-ENV] - Add backports repository"
  ansible.builtin.apt_repository:
    repo: 'deb http://deb.debian.org/debian bullseye-backports main'
    state: present
    update_cache: true
  when: sambadc_use_backport
  tags:
    - install

# Update packages cache and install required packages.
- name: "[SETUP-ENV] - Update packages cache."
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 86400
    default_release: "{{ 'bullseye-backports' if sambadc_use_backport | default(false) else omit }}"
  failed_when: false
  tags:
    - install

- name: "[SETUP-ENV] - Install samba packages."
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    allow_downgrade: true
    default_release: "{{ 'bullseye-backports' if sambadc_use_backport | default(false) else omit }}"
  loop:
    - krb5-config
    - krb5-user
    - libnss-winbind
    - libpam-winbind
    - winbind
    - samba
    - smbclient
    - ldb-tools
    - samba-common
    - ntp
    - acl
    - net-tools
    - ldap-utils
    - apparmor
    - unzip
    # - python3-cryptography
  tags:
    - install

- name: "[SETUP-ENV] - Install bind packages."
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    allow_downgrade: true
  when: sambadc_dns in [ "BIND9_FLATFILE", "BIND9_DLZ" ]
  loop:
    - bind9
    - dnsutils
  tags:
    - dns_bind_dlz
    - install

- name: "[SETUP-ENV] - Packages Autoclean and Autoremove."
  ansible.builtin.apt:
    autoclean: true
    autoremove: true

- name: "[SETUP-ENV] - Obtain list of installed packages."
  ansible.builtin.package_facts:
    manager: auto

- name: "[SETUP-ENV] - Obtain installed Samba-Version. Needed for some bugfixes."
  ansible.builtin.command: samba -V
  register: sambadc_version
  changed_when: false
  tags:
    - dns_bind_dlz

- name: "[SETUP-ENV] - Update libraries."
  ansible.builtin.command: ldconfig
  changed_when: true

# Get the interface. Needed for creation of reverse-zone and entry for bind9/named.
- name: "[SETUP-ENV] - Get interface IP-addresses when bind interfaces only is defined."
  ansible.builtin.set_fact:
    iface: "{{ ansible_facts[sambadc_bind_interfaces] }}"
  when: sambadc_bind_interfaces is defined
  tags:
    - dns_bind_dlz

- name: "[SETUP-ENV] - Get interface IP-addresses when only one interface is present."
  ansible.builtin.set_fact:
    iface: "{{ ansible_facts[ansible_facts.interfaces | reject('match', 'lo') | join] }}"
  when: sambadc_bind_interfaces is not defined
  tags:
    - dns_bind_dlz

# Read the various directories Samba uses.
- name: "[SETUP-ENV] - Obtain samba-files and/or directories to delete."
  ansible.builtin.command: smbd -b
  register: df_cmd
  changed_when: false
  tags:
    - cleanup
    - dns_bind_dlz
    - check

- name: "[SETUP-ENV] - Create Variables and set to associated directory."
  ansible.builtin.set_fact:
    "{{ item }}": "{{ df_cmd.stdout_lines | select('match', '.*' + item + '.*') | join(' ') | split(':') | last | trim }}"
  loop:
    - SBINDIR
    - BINDIR
    - CONFIGFILE
    - LOGFILEBASE
    - LMHOSTSFILE
    - LIBDIR
    - DATADIR
    - SAMBA_DATADIR
    - MODULESDIR
    - SHLIBEXT
    - LOCKDIR
    - STATEDIR
    - CACHEDIR
    - PIDDIR
    - SMB_PASSWD_FILE
    - PRIVATE_DIR
    - BINDDNS_DIR
  tags:
    - cleanup
    - dns_bind_dlz
    - check

# Directories returned form call smbd -b. Double-check presence of mandatory, because used, directories. Probably not needed.
- name: "[SETUP-ENV] - Check samba returned required directories."
  ansible.builtin.assert:
    that:
      - BINDDNS_DIR is defined
      - PRIVATE_DIR is defined
      - CONFIGFILE is defined
      - STATEDIR is defined
    msg: "smbd -b did not return required directories. Internal error."
  tags:
    - dns_bind_dlz
    - check

# Early binding to IPv6 during DHCP-address assignment, which may not be complete
# at startup when "samba-ad-dc"-service starts.
- name: "[SETUP-ENV] - Allow early bind to IPv6 interface."
  ansible.posix.sysctl:
    name: net.ipv6.ip_nonlocal_bind
    value: "1"
    state: present
    sysctl_set: true
    reload: true

# Copy the certificates if configured and if an intermed-CA is defined, concatenate
# the certificate to include the intermed-ca certificate.
- name: "[SETUP-ENV] - Copy Certificate files to host."
  ansible.builtin.copy:
    src: "{{ item.file }}"
    dest: "{{ PRIVATE_DIR }}/tls"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  when: sambadc_tls_cert is defined
  loop:
    - { file: "{{ sambadc_tls_cert }}", mode: "0644" }
    - { file: "{{ sambadc_tls_key }}", mode: "0600" }
    - { file: "{{ sambadc_tls_ca }}", mode: "0644" }

- name: "[SETUP-ENV] - Concatenate Intermed CA Certificate file with Certificate file and copy to host."
  ansible.builtin.template:
    src: templates/concatenate.j2
    dest: "{{ PRIVATE_DIR }}/tls/{{ fname.split('.')[:-1] | join('.') }}.pem"
    owner: root
    group: root
    mode: "0644"
  vars:
    fname: "{{ sambadc_tls_cert | basename }}"
    input_files: ["{{ sambadc_tls_cert }}", "{{ sambadc_tls_intermed }}"]
  when: sambadc_tls_intermed is defined

- name: "[SETUP-ENV] - Install Root-CA certificate in system wide trusted CA-store."
  when: sambadc_tls_ca_install_system
  block:
    - name: "[SETUP-ENV] - Copy Root CA Certificate file to host trusted CA-store."
      ansible.builtin.copy:
        src: "{{ sambadc_tls_ca }}"
        dest: "{{ sambadc_tls_install_dir }}"
        owner: root
        group: root
        mode: "0644"

    - name: "[SETUP-ENV] - Add Root CA Certificate file to trusted CA-store (1/2)."
      ansible.builtin.command: update-ca-certificates
      changed_when: true

    - name: "[SETUP-ENV] - Add Root CA Certificate file to trusted CA-store (2/2)."
      ansible.builtin.command: dpkg-reconfigure -u -p critical ca-certificates
      changed_when: true

- name: "[SETUP-ENV] - Write ldap.conf-file with settings. If TLS is configured (strongly recommended) also TLS-settings."
  ansible.builtin.template:
    src: templates/ldap.conf.j2
    dest: "{{ sambadc_ldap_conf_file }}"
    owner: root
    group: root
    mode: "0644"

# Set limits.
# ulimit -n 65536 or unlimited
# https://serverfault.com/questions/325608/samba-stuck-at-maximum-of-1024-open-files
# https://www.vivaolinux.com.br/topico/Debian/erro-rlimit_max-(16384)-Samba-PDC
# https://superuser.com/questions/740000/modify-and-apply-limits-conf-without-reboot
- name: "[SETUP-ENV] - Setup pam-limits, include pam_limits.so library in pam configuration."
  ansible.builtin.lineinfile:
    path: /etc/pam.d/common-session
    line: 'session required pam_limits.so'

- name: "[SETUP-ENV] - Setup pam-limits, in /etc/security/limits.conf."
  community.general.pam_limits:
    domain: "{{ item.user }}"
    limit_type: "{{ item.type }}"
    limit_item: nofile
    value: 65536
  loop:
    - { user: "root", type: "soft" }
    - { user: "root", type: "hard" }
    - { user: "*", type: "soft" }
    - { user: "*", type: "hard" }
