---
# Do some checking of the configuration provided to this ansible script before running it.
- name: "[USAGE] - Check that minimum required variables are defined and their values are correct."
  ansible.builtin.assert:
    that:
      - sambadc_dns is in [ "SAMBA_INTERNAL", "BIND9_DLZ" ]
      - sambadc_realm is defined
      - sambadc_forwarder is defined
      - sambadc_admin_password is defined
      - sambadc_type | lower is in [ "new", "join" ]
      - sambadc_timezone is defined
    fail_msg: "There is an error setting in the minimal configuration parameters."
  tags:
    - dns_bind_dlz

- name: "[USAGE] - Check if fileshares are defined when a Fileserver shall be setup (type join)."
  ansible.builtin.assert:
    that:
      - sambadc_shares is defined
    fail_msg: "When 'sambadc_type' is set to 'join', than at least one fileshare must be configured."
  when: sambadc_type | lower == "join"

- name: "[USAGE] - Check interfaces and presence of bind only interfaces config parameter. (1/3)."
  ansible.builtin.meta: end_play
  when: ( ansible_facts.interfaces | length < 3 ) and ( "lo" not in ansible_facts.interfaces | lower )
  tags:
    - dns_bind_dlz

- name: "[USAGE] - Check interfaces and presence of bind only interfaces config parameter. (2/3)."
  ansible.builtin.meta: end_play
  when:
    - ansible_facts.interfaces | length >= 3
    - sambadc_bind_interfaces is not defined
  tags:
    - dns_bind_dlz

- name: "[USAGE] - Check interfaces and presence of bind only interfaces config parameter. (3/3)."
  ansible.builtin.meta: end_play
  when:
    - ansible_facts.interfaces | length >= 3
    - sambadc_bind_interfaces | lower not in ansible_facts.interfaces | lower
  tags:
    - dns_bind_dlz

- name: "[USAGE] - Check if inventory-hostname and host-hostname match."
  ansible.builtin.meta: end_play
  when: inventory_hostname | lower != ansible_hostname | lower
  tags:
    - dns_bind_dlz

- name: "[USAGE] - Check if TLS-certificates are correctly configured."
  ansible.builtin.assert:
    that:
      - sambadc_tls_ca is defined
      - sambadc_tls_cert is defined
      - sambadc_tls_key is defined
    fail_msg: "TLS-certificates are defined. This requires all three parameters sambadc_tls_ca, sambadc_tls_cert and sambadc_tls_key to be set."
  when: (sambadc_tls_ca is defined) or (sambadc_tls_cert is defined) or (samba_tls_key is defined)

# Requires openssl install on control host.
- name: "[USAGE] - Check provided certificate chain."
  when: sambadc_tls_cert is defined
  block:
    - name: "[USAGE] - Check Certififcate chain, no intermed CA is defined."
      ansible.builtin.command: openssl verify -purpose sslserver -CAfile "{{ ca_file }}" "{{ crt_file }}"
      delegate_to: localhost
      become: false
      changed_when: false
      when: sambadc_tls_intermed is not defined
      vars:
        ca_file: "{{ playbook_dir }}/{{ sambadc_tls_ca }}"
        crt_file: "{{ playbook_dir }}/{{ sambadc_tls_cert }}"

    - name: "[USAGE] - Check Certififcate chain, with intermed CA is defined."
      when: sambadc_tls_intermed is defined
      block:
        - name: "[USAGE] - Check Certififcate chain part: Root CA <-> Intermed CA."
          ansible.builtin.command: openssl verify -partial_chain -CAfile "{{ ca_file }}" "{{ crt_file }}"
          delegate_to: localhost
          become: false
          changed_when: false
          vars:
            ca_file: "{{ playbook_dir }}/{{ sambadc_tls_ca }}"
            crt_file: "{{ playbook_dir }}/{{ sambadc_tls_intermed }}"

        - name: "[USAGE] - Check Certififcate chain part: Intermed CA <-> Certificate."
          ansible.builtin.command: openssl verify -partial_chain -CAfile "{{ ca_file }}" "{{ crt_file }}"
          delegate_to: localhost
          become: false
          changed_when: false
          vars:
            ca_file: "{{ playbook_dir }}/{{ sambadc_tls_intermed }}"
            crt_file: "{{ playbook_dir }}/{{ sambadc_tls_cert }}"

    - name: "[USAGE] - Check Certififcate Common Name matches host-FQDN (1/2)."
      ansible.builtin.command: openssl x509 -in "{{ crt_file }}" -noout -subject
      delegate_to: localhost
      register: df_cmd
      become: false
      changed_when: false
      vars:
        crt_file: "{{ playbook_dir }}/{{ sambadc_tls_cert }}"

    - name: "[USAGE] - Check Certififcate Common Name matches host-FQDN (2/2)."
      ansible.builtin.assert:
        that:
          - crt_common_name == sambadc_fqdn
        fail_msg: "The certificate common name ({{ crt_common_name }}) does not match the FQDN of the host: {{ sambadc_fqdn }}"
      delegate_to: localhost
      become: false
      changed_when: false
      vars:
        crt_common_name: "{{ df_cmd.stdout | regex_search('CN = ([a-zA-Z0-9\\.]+)', '\\1') | first }}"
