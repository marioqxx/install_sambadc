---
# Set the password-restrictions to a low level.
- name: "[SETTINGS] - Disable password expiration for the Administrator account."
  ansible.builtin.command: samba-tool user setexpiry Administrator --noexpiry
  changed_when: true
  tags:
    - settings

- name: "[SETTINGS] - Disable password history at the domain level."
  ansible.builtin.command: samba-tool domain passwordsettings set --"{{ item.setting }}"="{{ item.value }}"
  loop:
    - { setting: "complexity", value: "off" }
    - { setting: "min-pwd-age", value: "0" }
    - { setting: "max-pwd-age", value: "0" }
    - { setting: "min-pwd-length", value: "4" }
    - { setting: "history-length", value: "0" }
  changed_when: true
  tags:
    - settings

# Export all configured keytabs.
# see ansible-docs at playbooks_tests#type-tests for how to identify list type of variable.
- name: "[SETTINGS] - Create SPN if not (implicit) existent."
  ansible.builtin.command: >
    samba-tool spn add "{{ item.0.service }}/{{ item.1 }}@{{ sambadc_realm | upper }}" "{{ item.1 | split('.') | first }}$"
  register: df_cmd
  changed_when: (df_cmd.rc == 0)
  failed_when: (df_cmd.rc != 0) and (df_cmd.stderr | lower) is not search("already")
  loop: "{{ sambadc_exportkeytab | subelements('principals') }}"
  loop_control:
    label: "Create SPN {{ item.0.service }}/{{ item.1 }}@{{ sambadc_realm | upper }}."
  when:
    - (item.1 | lower) not in sambadc_implicit_spn
    - (sambadc_exportkeytab is not string) and (sambadc_exportkeytab is not mapping) and (sambadc_exportkeytab is sequence)
  tags:
    - settings

- name: "[SETTINGS] - Export configured keytabs to PRIVATE_DIR."
  ansible.builtin.command: >
    samba-tool domain exportkeytab "{{ PRIVATE_DIR }}/{{ item.0.keytabfilename }}"
       --principal="{{ item.0.service }}/{{ item.1 }}"
  register: df_cmd
  changed_when: (df_cmd.rc == 0) and (df_cmd.stdout | lower) is search("export")
  loop: "{{ sambadc_exportkeytab | subelements('principals') }}"
  loop_control:
    label: "Export principal {{ item.0.service }}/{{ item.1 }} to keytab {{ PRIVATE_DIR}}/{{ item.0.keytabfilename }}"
  when: (sambadc_exportkeytab is not string) and (sambadc_exportkeytab is not mapping) and (sambadc_exportkeytab is sequence)
  tags:
    - settings

- name: "[SETTINGS] - Remove RC4-cipher from exported keytab."
  block:
    - name: "[SETTINGS] - Remove RC4-cipher: Read keytab listing (1/4)."
      ansible.builtin.command: klist -ke "{{ PRIVATE_DIR }}/{{ item.keytabfilename }}"
      register: df_cmd
      loop: "{{ sambadc_exportkeytab }}"
      loop_control:
        label: "List keytab {{ PRIVATE_DIR }}/{{ item.keytabfilename }} entries."

    # The slot-number derived is to be used for the delent-command in ktutil
    - name: "[SETTINGS] - Remove RC4-cipher: Get keytab slots to be deleted. (2/4)."
      ansible.builtin.set_fact:
        keytab_slot: "{{ keytab_slot | default([]) + [{'keytabfilename': item.item.keytabfilename, 'delentries': entrylist }] }}"
      loop: "{{ df_cmd.results }}"
      loop_control:
        label: "Get slots for keytabfile {{ item.item.keytabfilename }} for SPN: {{ item.item.service }}"
      vars:
        entries: "{{ range(-2, item.stdout_lines | length - 2 ) | zip(item.stdout_lines) | select('search','DEPRECATED') }}"
        entrylist: "{{ entries | reverse | flatten | select('integer') }}"

    - name: "[SETTINGS] - Remove RC4-cipher: Delete temporary keytab with removed entries. (3/4)."
      ansible.builtin.file:
        path: "{{ PRIVATE_DIR}}/{{ item.keytabfilename }}_sec"
        state: absent
      loop: "{{ keytab_slot }}"
      loop_control:
        label: "{{ 'Delete file:' ~ item.keytabfilename ~ '_sec' }}"

    # {{ str }} needs to be in vars-block, putting the template directoy into stdin does not work.
    - name: "[SETTINGS] - Remove RC4-cipher: Create new temporary keytab with removed entries. (4/4)."
      ansible.builtin.command: ktutil
      register: df_cmd
      loop: "{{ keytab_slot }}"
      loop_control:
        label: "{{ 'New keytab-file with removed RC4-cipher: ' ~ item.keytabfilename ~ '_sec' }}"
      args:
        stdin: |
          rkt "{{ PRIVATE_DIR}}/{{ item.keytabfilename }}"
          {{ str }}
          wkt "{{ PRIVATE_DIR}}/{{ item.keytabfilename }}_sec"
          quit
      vars:
        str: "{{ 'delent ' ~ item.delentries | join('\ndelent ') }}"
  when: sambadc_security_hardening
  tags:
    - settings

- name: "[SETTINGS] - Copy configured keytabs to the configured directories."
  ansible.builtin.copy:
    src: "{{ PRIVATE_DIR }}/{{ item.keytabfilename }}{{ '_sec' if sambadc_security_hardening else '' }}"
    dest: "{{ item.destination[0] }}"
    owner: "{{ item.destination[1] }}"
    group: "{{ item.destination[2] }}"
    mode: "{{ item.destination[3] }}"
    remote_src: true
  loop: "{{ sambadc_exportkeytab }}"
  loop_control:
    label: "{{ 'Copy ' ~ PRIVATE_DIR ~ '/' ~ item.keytabfilename }}{{ '_sec' if sambadc_security_hardening else '' }}{{ ' to ' ~ item.destination[0] }}"
  when:
    - (sambadc_exportkeytab is not string) and (sambadc_exportkeytab is not mapping) and (sambadc_exportkeytab is sequence)
    - (item.destination is defined) and (item.destination | length) == 4
  tags:
    - settings

# Set the SeDiskOperatorPrivilege for user Administrator
- name: "[SETTINGS] - Set SeDiskOperatorPrivilege for 'Domain Admins'-group."
  ansible.builtin.command: >
    net rpc rights grant "{{ sambadc_workgroup ~ '\Domain Admins' }}" SeDiskOperatorPrivilege --user "{{ sambadc_workgroup ~ '\Administrator' }}"
  args:
    stdin: "{{ sambadc_admin_password }}"
  changed_when: true
  tags:
    - settings
